# Recipe grammar for use with Waxeye Parser Generator
# (C) Kyle Kamperschroer 2013

RECIPE <- wsn TITLE wsn ATTRIBUTES wsn INGREDIENTS_LIST wsn DIRECTIONS wsn

TITLE <- WORDS
WORDS <= +[A-Za-z0-9:;_!?.,()/ -°½¼]
WORDS_NO_BREAK <= +[A-Za-z_!?/ ]

ATTRIBUTES <- +ATTRIBUTE
ATTRIBUTE <- ( YIELD |
               COOK_TIME |
               PREP_TIME |
               OVERALL_TIME
             )
             ?( +[|,- ] |
                wsn
              )

YIELD <- YIELD_PREFIX ?wsn
         ?(ATTRIBUTE_SEPARATOR wsn)
         AMOUNT ?ws ?UNIT

YIELD_PREFIX <- ( "yield"?"s" |
                  "serve"?"s" |
                  "make"?"s" |
                  "serving"?"s"
                )
                ?wsn

COOK_TIME <- COOK_TIME_PREFIX wsn
             ?(ATTRIBUTE_SEPARATOR wsn)
             +(AMOUNT ws TIME_UNITS ?(?"," ws))

COOK_TIME_PREFIX <- ( "cook" |
                      "bake"
                    ) wsn
                    ?("time")

TIME_UNITS <- ( "hour"?"s" |
                "minute"?"s" |
                "h"?"s" |
                "m"?"s" |
                "min"?"s"
              )
              ?wsn

PREP_TIME <- PREP_TIME_PREFIX wsn
             ?(ATTRIBUTE_SEPARATOR wsn)
             AMOUNT ws TIME_UNITS

PREP_TIME_PREFIX <- ( "prep" |
                      "preparation" |
                      "hands-on" |
                      "hands on"
                    ) wsn
                    ?("time")

OVERALL_TIME <- OVERALL_TIME_PREFIX wsn
                ?(ATTRIBUTE_SEPARATOR wsn)
                AMOUNT ws TIME_UNITS

OVERALL_TIME_PREFIX <- ( "overall" |
                         "total" |
                         "ready in"
                       ) wsn
                       ?("time")

ATTRIBUTE_SEPARATOR <= (":" | "=" | "is")

INGREDIENTS_LIST <- ?(INGREDIENTS_PREFIX wsn) +(INGREDIENT pwsn)
INGREDIENTS_PREFIX <- "ingredient"?"s" ?"list" ?":"

INGREDIENT <- (
                 ( MEASUREMENT ?ws PRODUCT ?ws SPECIAL_DIRECTIONS ) |
                 ( MEASUREMENT ?ws PRODUCT ) |
                 ( PRODUCT ?ws SPECIAL_DIRECTIONS ) |
                 ( PRODUCT )
              )

MEASUREMENT <- (
                  ( AMOUNT ?ws SPECIFIER pws UNIT pws ) |
                  ( AMOUNT ?ws SPECIFIER ) |
                  ( AMOUNT pws UNIT pws ) |
                  ( AMOUNT )
               )

AMOUNT <- NUMBER_OR_FRACTION
UNIT <- ( "cup"?"s" |
          "can"?"s" |
          "cp"?"s" |
          "container"?"s" |
          "teaspoon"?"s" |
          "tsp"?"s" |
          "tablespoon"?"s" |
          "tb"?"s" |
          "lb"?"s" |
          "pound"?"s" |
          "oz"?"s" |
          "fluid oz"?"s" |
          "fl oz"?"s" |
          "fl ounce"?"s" |
          "ounce"?"s" |
          "fluid ounce"?"s" |
          "gallon"?"s" |
          "gal"?"s" |
          "pinch"?"s" |
          "dash"?'es' |
          "dollup"?"s" |
          "qt"?"s" |
          "quart"?"s" |
          "pint"?"s" |
          "pnt"?"s" |
          "pt"?"s" |
          "qrt"?"s" |
          "jar"?"s" |
          "inch"?"es" |
          "package"?"es" |
          "handful"?"s" |
          "large" |
          "serving"?"s" |
          "people"?"s" |
          "person"?"s" |
          "c"?"s"
        )

SPECIFIER <- ?"(" ?GENERALIZER ws AMOUNT (ws|'-') UNIT ?")"
GENERALIZER <- (
                  ( "a" ) |
                  ( "about" )
               )
        
# I know some of the valid values here aren't acutal numbers, but oh well.
NUMBER_OR_FRACTION <= +[0-9]' '+[0-9]'/'+[0-9] |
                      +[0-9] |
                      +[0-9]'/'+[0-9] |
                      +[0-9]'.'+[0-9]

SPECIAL_DIRECTIONS <- (
                         ( SPECIFIER ?ws SPECIAL_DIRECTIONS ) |
                         ( SPECIFIER ) |
                         ( [,.-] ?ws WORDS ) |
                         ( '(' ?ws WORDS ?ws ')' )
                      )
#SPECIAL_DIRECTIONS <- [,.-(] ?ws WORDS ?(ws ")")
                      
PRODUCT <- WORDS_NO_BREAK

DIRECTIONS <- ?DIRECTIONS_HEADER wsn DIRECTIONS_TEXT
DIRECTIONS_HEADER <- "direction"?"s"?':' wsn
DIRECTIONS_TEXT <- +(WORDS wsn)

#wsn = Whitespace and newlines
wsn <: *[ \t\n\r]
#ws = Whitespace (no newlines)
ws <: *[ \t]
#pwsn = Whitespace and newlines (non-optional)
pwsn <: +[ \t\n\r]
#pws = Whitespace (no newlines, non-optional)
pws <: +[ \t]
