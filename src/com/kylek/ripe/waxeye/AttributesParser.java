package com.kylek.ripe.waxeye;
/*
 * Generated by the Waxeye Parser Generator - version 0.8.0
 * www.waxeye.org
 */

import java.util.ArrayList;
import java.util.List;

import org.waxeye.parser.AutomatonTransition;
import org.waxeye.parser.CharTransition;
import org.waxeye.parser.Edge;
import org.waxeye.parser.FA;
import org.waxeye.parser.State;
import org.waxeye.parser.WildCardTransition;

/**
 * A parser generated by the Waxeye Parser Generator.
 *
 * @author Waxeye Parser Generator
 */
public final class AttributesParser extends org.waxeye.parser.Parser<AttributesType>
{
    /**
     * Creates a new Parser.
     */
    public AttributesParser()
    {
        super(makeAutomata(), true, 0, AttributesType._Empty, AttributesType._Char, AttributesType._Pos, AttributesType._Neg);
    }

    /**
     * Builds the automata for the parser.
     *
     * @return The automata for the parser.
     */
    private static List<FA<AttributesType>> makeAutomata()
    {
        List<Edge<AttributesType>> edges;
        List<State<AttributesType>> states;
        final List<FA<AttributesType>> automata = new ArrayList<FA<AttributesType>>();

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(1), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(1), 1, false));
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.ATTRIBUTES, FA.LEFT, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(2), 1, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(4), 1, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(7), 1, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(9), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'|'}, new char[]{' '}, new char[]{','}), 2, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 3, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'|'}, new char[]{' '}, new char[]{','}), 2, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.ATTRIBUTE, FA.LEFT, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(3), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 2, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(11), 3, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(3), 5, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 7, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(11), 3, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(3), 5, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 7, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(3), 5, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 7, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 6, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 7, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(13), 8, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(21), 9, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(21), 9, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.YIELD, FA.LEFT, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'Y', 'y'}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 8, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'M', 'm'}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 17, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'D', 'd'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 6, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 7, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 7, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 9, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 10, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'V', 'v'}, new char[]{}, new char[]{}), 11, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 12, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 6, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 7, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 14, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'K', 'k'}, new char[]{}, new char[]{}), 15, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 16, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 6, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 7, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 18, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 19, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'V', 'v'}, new char[]{}, new char[]{}), 20, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 21, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 22, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'G', 'g'}, new char[]{}, new char[]{}), 23, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 6, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 7, false));
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.YIELD_PREFIX, FA.LEFT, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(5), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 2, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(11), 3, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 5, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 5, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(13), 6, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(6), 7, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{','}, new char[]{}, new char[]{}), 8, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(13), 9, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 10, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(13), 9, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 10, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(13), 11, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(6), 12, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{','}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(13), 9, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 10, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(13), 9, false));
        states.add(new State<AttributesType>(edges, false));
        automata.add(new FA<AttributesType>(AttributesType.COOK_TIME, FA.LEFT, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'C', 'c'}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'B', 'b'}, new char[]{}, new char[]{}), 10, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'K', 'k'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 5, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 6, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 7, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'M', 'm'}, new char[]{}, new char[]{}), 8, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 9, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 11, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'K', 'k'}, new char[]{}, new char[]{}), 12, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, false));
        automata.add(new FA<AttributesType>(AttributesType.COOK_TIME_PREFIX, FA.LEFT, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'H', 'h'}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'M', 'm'}, new char[]{}, new char[]{}), 7, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'H', 'h'}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'M', 'm'}, new char[]{}, new char[]{}), 14, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'U', 'u'}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 5, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 6, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 6, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 8, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 9, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'U', 'u'}, new char[]{}, new char[]{}), 10, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 5, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 6, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 11, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 12, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 5, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 6, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 5, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 6, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 5, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 6, false));
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.TIME_UNITS, FA.LEFT, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(8), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 2, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(11), 3, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 5, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 5, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(13), 6, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(6), 7, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.PREP_TIME, FA.LEFT, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'H', 'h'}, new char[]{}, new char[]{}), 17, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 26, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 5, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 10, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 6, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 7, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'M', 'm'}, new char[]{}, new char[]{}), 8, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 9, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 11, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 12, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 13, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 14, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 15, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 16, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 5, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 18, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 19, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'D', 'd'}, new char[]{}, new char[]{}), 20, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 21, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'-'}, new char[]{}, new char[]{}), 22, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{' '}, new char[]{}, new char[]{}), 24, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 23, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 16, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 25, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 16, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'C', 'c'}, new char[]{}, new char[]{}), 27, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 28, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 29, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'V', 'v'}, new char[]{}, new char[]{}), 30, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 16, false));
        states.add(new State<AttributesType>(edges, false));
        automata.add(new FA<AttributesType>(AttributesType.PREP_TIME_PREFIX, FA.LEFT, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(10), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 2, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(11), 3, false));
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 5, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(19), 5, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(13), 6, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(6), 7, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.OVERALL_TIME, FA.LEFT, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 17, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'V', 'v'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 6, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 7, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(12), 8, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 9, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 10, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'M', 'm'}, new char[]{}, new char[]{}), 11, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 12, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 14, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 15, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 16, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 7, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 18, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 19, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'D', 'd'}, new char[]{}, new char[]{}), 20, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'Y', 'y'}, new char[]{}, new char[]{}), 21, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{' '}, new char[]{}, new char[]{}), 22, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 23, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 7, false));
        states.add(new State<AttributesType>(edges, false));
        automata.add(new FA<AttributesType>(AttributesType.OVERALL_TIME_PREFIX, FA.LEFT, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{':'}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'='}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<AttributesType>(edges, false));
        automata.add(new FA<AttributesType>(AttributesType.ATTRIBUTE_SEPARATOR, FA.PRUNE, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'\r', ' '}, new char[]{'\t'}, new char[]{'\n'}), 0, false));
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.Wsn, FA.VOID, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'\t', ' '}, new char[]{}, new char[]{}), 0, false));
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.Ws, FA.VOID, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'\r', ' '}, new char[]{'\t'}, new char[]{'\n'}), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'\r', ' '}, new char[]{'\t'}, new char[]{'\n'}), 1, false));
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.Pwsn, FA.VOID, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'\t', ' '}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'\t', ' '}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.Pws, FA.VOID, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'é'}, new char[]{' ', '¼'}, new char[]{'°', '½'}), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'é'}, new char[]{' ', '¼'}, new char[]{'°', '½'}), 1, false));
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.WORDS, FA.PRUNE, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'/', '?', '_'}, new char[]{' ', 'A', 'a'}, new char[]{'!', 'Z', 'z'}), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'/', '?', '_'}, new char[]{' ', 'A', 'a'}, new char[]{'!', 'Z', 'z'}), 1, false));
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.WORDS_NO_BREAK, FA.PRUNE, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'?', '_'}, new char[]{' ', ',', 'A', 'a'}, new char[]{'!', ';', 'Z', 'z'}), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'?', '_'}, new char[]{' ', ',', 'A', 'a'}, new char[]{'!', ';', 'Z', 'z'}), 1, false));
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.WORDS_NO_PARENS, FA.PRUNE, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new AutomatonTransition<AttributesType>(20), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.AMOUNT, FA.LEFT, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 1, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 2, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{' '}, new char[]{}, new char[]{}), 3, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 11, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{' '}, new char[]{}, new char[]{}), 12, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 16, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'/'}, new char[]{}, new char[]{}), 17, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 19, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'.'}, new char[]{}, new char[]{}), 20, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 22, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 2, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{' '}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'D', 'd'}, new char[]{}, new char[]{}), 6, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{' '}, new char[]{}, new char[]{}), 7, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 8, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 8, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'/'}, new char[]{}, new char[]{}), 9, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 10, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 10, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 11, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{' '}, new char[]{}, new char[]{}), 12, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 13, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 13, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'/'}, new char[]{}, new char[]{}), 14, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 15, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 15, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 16, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'/'}, new char[]{}, new char[]{}), 17, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 18, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 18, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 19, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'.'}, new char[]{}, new char[]{}), 20, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 21, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 21, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 22, false));
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.NUMBER_OR_FRACTION, FA.PRUNE, states));

        states = new ArrayList<State<AttributesType>>();
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'C', 'c'}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 16, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 36, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 38, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 43, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'F', 'f'}, new char[]{}, new char[]{}), 45, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 60, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'F', 'f'}, new char[]{}, new char[]{}), 65, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'G', 'g'}, new char[]{}, new char[]{}), 76, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 82, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'D', 'd'}, new char[]{}, new char[]{}), 87, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'Q', 'q'}, new char[]{}, new char[]{}), 97, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 103, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'Q', 'q'}, new char[]{}, new char[]{}), 110, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'J', 'j'}, new char[]{}, new char[]{}), 113, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 116, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 121, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'H', 'h'}, new char[]{}, new char[]{}), 129, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 136, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 140, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 147, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'C', 'c'}, new char[]{}, new char[]{}), 157, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'U', 'u'}, new char[]{}, new char[]{}), 2, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 5, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 7, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 8, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 6, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 9, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 10, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 11, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 12, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 13, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 14, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 15, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 17, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 24, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 26, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'B', 'b'}, new char[]{}, new char[]{}), 35, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 18, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 19, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 20, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 21, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 22, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 23, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 25, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'B', 'b'}, new char[]{}, new char[]{}), 27, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 28, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 29, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 30, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 31, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 32, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 33, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 34, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'B', 'b'}, new char[]{}, new char[]{}), 37, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 39, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'U', 'u'}, new char[]{}, new char[]{}), 40, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 41, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'D', 'd'}, new char[]{}, new char[]{}), 42, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'Z', 'z'}, new char[]{}, new char[]{}), 44, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 46, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'U', 'u'}, new char[]{}, new char[]{}), 47, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{' '}, new char[]{}, new char[]{}), 53, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 48, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'D', 'd'}, new char[]{}, new char[]{}), 49, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{' '}, new char[]{}, new char[]{}), 50, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 51, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'Z', 'z'}, new char[]{}, new char[]{}), 52, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 54, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'Z', 'z'}, new char[]{}, new char[]{}), 55, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'U', 'u'}, new char[]{}, new char[]{}), 56, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 57, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'C', 'c'}, new char[]{}, new char[]{}), 58, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 59, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'U', 'u'}, new char[]{}, new char[]{}), 61, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 62, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'C', 'c'}, new char[]{}, new char[]{}), 63, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 64, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 66, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'U', 'u'}, new char[]{}, new char[]{}), 67, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 68, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'D', 'd'}, new char[]{}, new char[]{}), 69, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{' '}, new char[]{}, new char[]{}), 70, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 71, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'U', 'u'}, new char[]{}, new char[]{}), 72, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 73, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'C', 'c'}, new char[]{}, new char[]{}), 74, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 75, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 77, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 78, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 79, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 80, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 81, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 83, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 84, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'C', 'c'}, new char[]{}, new char[]{}), 85, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'H', 'h'}, new char[]{}, new char[]{}), 86, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 88, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 92, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 89, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'H', 'h'}, new char[]{}, new char[]{}), 90, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'e'}, new char[]{}, new char[]{}), 91, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'s'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 93, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 94, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'U', 'u'}, new char[]{}, new char[]{}), 95, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 96, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 98, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'U', 'u'}, new char[]{}, new char[]{}), 99, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 100, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 101, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 102, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 104, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 107, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 109, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 105, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 106, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 108, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 111, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'T', 't'}, new char[]{}, new char[]{}), 112, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 114, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 115, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 117, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'C', 'c'}, new char[]{}, new char[]{}), 118, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'H', 'h'}, new char[]{}, new char[]{}), 119, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 120, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 122, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'C', 'c'}, new char[]{}, new char[]{}), 123, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'K', 'k'}, new char[]{}, new char[]{}), 124, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 125, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'G', 'g'}, new char[]{}, new char[]{}), 126, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 127, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 128, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 130, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 131, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'D', 'd'}, new char[]{}, new char[]{}), 132, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'F', 'f'}, new char[]{}, new char[]{}), 133, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'U', 'u'}, new char[]{}, new char[]{}), 134, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 135, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'A', 'a'}, new char[]{}, new char[]{}), 137, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 138, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'G', 'g'}, new char[]{}, new char[]{}), 139, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 141, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 142, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'V', 'v'}, new char[]{}, new char[]{}), 143, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'I', 'i'}, new char[]{}, new char[]{}), 144, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 145, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'G', 'g'}, new char[]{}, new char[]{}), 146, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 148, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 149, false));
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'R', 'r'}, new char[]{}, new char[]{}), 153, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'P', 'p'}, new char[]{}, new char[]{}), 150, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'L', 'l'}, new char[]{}, new char[]{}), 151, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'E', 'e'}, new char[]{}, new char[]{}), 152, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 154, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'O', 'o'}, new char[]{}, new char[]{}), 155, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'N', 'n'}, new char[]{}, new char[]{}), 156, false));
        states.add(new State<AttributesType>(edges, false));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        edges = new ArrayList<Edge<AttributesType>>();
        edges.add(new Edge<AttributesType>(new CharTransition<AttributesType>(new char[]{'S', 's'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<AttributesType>(edges, true));
        automata.add(new FA<AttributesType>(AttributesType.UNIT, FA.LEFT, states));

        return automata;
    }
}
